// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/cristiano-pacheco/goflix/internal/identity/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthTokenRepository is an autogenerated mock type for the AuthTokenRepository type
type MockAuthTokenRepository struct {
	mock.Mock
}

type MockAuthTokenRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthTokenRepository) EXPECT() *MockAuthTokenRepository_Expecter {
	return &MockAuthTokenRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, authToken
func (_m *MockAuthTokenRepository) Create(ctx context.Context, authToken model.AuthTokenModel) (model.AuthTokenModel, error) {
	ret := _m.Called(ctx, authToken)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.AuthTokenModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthTokenModel) (model.AuthTokenModel, error)); ok {
		return rf(ctx, authToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthTokenModel) model.AuthTokenModel); ok {
		r0 = rf(ctx, authToken)
	} else {
		r0 = ret.Get(0).(model.AuthTokenModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.AuthTokenModel) error); ok {
		r1 = rf(ctx, authToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthTokenRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAuthTokenRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - authToken model.AuthTokenModel
func (_e *MockAuthTokenRepository_Expecter) Create(ctx interface{}, authToken interface{}) *MockAuthTokenRepository_Create_Call {
	return &MockAuthTokenRepository_Create_Call{Call: _e.mock.On("Create", ctx, authToken)}
}

func (_c *MockAuthTokenRepository_Create_Call) Run(run func(ctx context.Context, authToken model.AuthTokenModel)) *MockAuthTokenRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.AuthTokenModel))
	})
	return _c
}

func (_c *MockAuthTokenRepository_Create_Call) Return(_a0 model.AuthTokenModel, _a1 error) *MockAuthTokenRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthTokenRepository_Create_Call) RunAndReturn(run func(context.Context, model.AuthTokenModel) (model.AuthTokenModel, error)) *MockAuthTokenRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockAuthTokenRepository) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthTokenRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAuthTokenRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *MockAuthTokenRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockAuthTokenRepository_Delete_Call {
	return &MockAuthTokenRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockAuthTokenRepository_Delete_Call) Run(run func(ctx context.Context, id uint64)) *MockAuthTokenRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockAuthTokenRepository_Delete_Call) Return(_a0 error) *MockAuthTokenRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthTokenRepository_Delete_Call) RunAndReturn(run func(context.Context, uint64) error) *MockAuthTokenRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByToken provides a mock function with given fields: ctx, token
func (_m *MockAuthTokenRepository) FindByToken(ctx context.Context, token string) (model.AuthTokenModel, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for FindByToken")
	}

	var r0 model.AuthTokenModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.AuthTokenModel, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.AuthTokenModel); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(model.AuthTokenModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthTokenRepository_FindByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByToken'
type MockAuthTokenRepository_FindByToken_Call struct {
	*mock.Call
}

// FindByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockAuthTokenRepository_Expecter) FindByToken(ctx interface{}, token interface{}) *MockAuthTokenRepository_FindByToken_Call {
	return &MockAuthTokenRepository_FindByToken_Call{Call: _e.mock.On("FindByToken", ctx, token)}
}

func (_c *MockAuthTokenRepository_FindByToken_Call) Run(run func(ctx context.Context, token string)) *MockAuthTokenRepository_FindByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthTokenRepository_FindByToken_Call) Return(_a0 model.AuthTokenModel, _a1 error) *MockAuthTokenRepository_FindByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthTokenRepository_FindByToken_Call) RunAndReturn(run func(context.Context, string) (model.AuthTokenModel, error)) *MockAuthTokenRepository_FindByToken_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, authToken
func (_m *MockAuthTokenRepository) Update(ctx context.Context, authToken model.AuthTokenModel) error {
	ret := _m.Called(ctx, authToken)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthTokenModel) error); ok {
		r0 = rf(ctx, authToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthTokenRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAuthTokenRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - authToken model.AuthTokenModel
func (_e *MockAuthTokenRepository_Expecter) Update(ctx interface{}, authToken interface{}) *MockAuthTokenRepository_Update_Call {
	return &MockAuthTokenRepository_Update_Call{Call: _e.mock.On("Update", ctx, authToken)}
}

func (_c *MockAuthTokenRepository_Update_Call) Run(run func(ctx context.Context, authToken model.AuthTokenModel)) *MockAuthTokenRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.AuthTokenModel))
	})
	return _c
}

func (_c *MockAuthTokenRepository_Update_Call) Return(_a0 error) *MockAuthTokenRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthTokenRepository_Update_Call) RunAndReturn(run func(context.Context, model.AuthTokenModel) error) *MockAuthTokenRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthTokenRepository creates a new instance of MockAuthTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthTokenRepository {
	mock := &MockAuthTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
