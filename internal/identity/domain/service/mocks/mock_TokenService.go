// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/cristiano-pacheco/goflix/internal/identity/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// MockTokenService is an autogenerated mock type for the TokenService type
type MockTokenService struct {
	mock.Mock
}

type MockTokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenService) EXPECT() *MockTokenService_Expecter {
	return &MockTokenService_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: ctx, user
func (_m *MockTokenService) Generate(ctx context.Context, user model.UserModel) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserModel) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserModel) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserModel) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenService_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockTokenService_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - user model.UserModel
func (_e *MockTokenService_Expecter) Generate(ctx interface{}, user interface{}) *MockTokenService_Generate_Call {
	return &MockTokenService_Generate_Call{Call: _e.mock.On("Generate", ctx, user)}
}

func (_c *MockTokenService_Generate_Call) Run(run func(ctx context.Context, user model.UserModel)) *MockTokenService_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserModel))
	})
	return _c
}

func (_c *MockTokenService_Generate_Call) Return(_a0 string, _a1 error) *MockTokenService_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenService_Generate_Call) RunAndReturn(run func(context.Context, model.UserModel) (string, error)) *MockTokenService_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenService creates a new instance of MockTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenService {
	mock := &MockTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
