---
description: 
globs: *_enum.go
alwaysApply: false
---
# Golang Enum Pattern

Template:

```go
package enum

import "errors"

// Constants with pattern: Enum{EnumName}{Value}
const (
	Enum{EnumName}{Value1} string = "{Value1}"
	Enum{EnumName}{Value2} string = "{Value2}"
	// Add more values as needed
)

// Struct type: {EnumName}Enum
type {EnumName}Enum struct {
	value string
}

// Constructor: New{EnumName}Enum
func New{EnumName}Enum(value string) ({EnumName}Enum, error) {
	if err := validate{EnumName}Enum(value); err != nil {
		return {EnumName}Enum{}, err
	}

	return {EnumName}Enum{value: value}, nil
}

// String method
func (e *{EnumName}Enum) String() string {
	return e.value
}

// Validation function
func validate{EnumName}Enum(value string) error {
	allowedValues := map[string]struct{}{
		Enum{EnumName}{Value1}: {},
		Enum{EnumName}{Value2}: {},
		// Add all enum values here
	}

	if _, ok := allowedValues[value]; !ok {
		return errors.New("invalid {enum name}: " + value)
	}

	return nil
}
```

Naming:
- Constants: Enum{EnumName}{Value}
- Struct: {EnumName}Enum  
- Constructor: New{EnumName}Enum
- Validator: validate{EnumName}Enum

Usage:
```go
status, err := NewSubscriptionStatusEnum(EnumSubscriptionStatusActive)
if err != nil {
    // handle error
}
fmt.Println(status.String()) // "Active"
```